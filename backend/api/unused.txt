@robot_api.route(f'/{endpoint}', methods=['GET'])
@cross_origin()
@requires_auth(
    requires_permissions(["get:robots"]),
    requires_ownership
)
def get_all():
    try:
        user_id = request.args.get('user_id', None)
        if user_id is None:
            return make_response(
                jsonify({
                'success': False,
                'message': 'Missing user Id'}), 
                400)
            
        qry = Robot.query \
            .filter_by(user_id = user_id) \
            .order_by(Robot.name.asc())
        
        if request.args.get('activeOnly', True, type=is_it_true):
            qry.filter(Robot.status == Status.active) 
        
        result = qry.all()
        # formats the data for output
        expanded = request.args.get(
            'expanded', False, type=is_it_true)  # type: ignore
        if expanded:
            formattedData = [datum.format_long() for datum in result]
        else:
            formattedData = [datum.format() for datum in result]

        return jsonify({
            'success': True,
            'data': formattedData,
            'count': len(formattedData)
        })
        
    except Exception as err:
        print(sys.exc_info(), err)
        return internal_error(err)